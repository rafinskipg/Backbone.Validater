/*! Backbone Validater - MIT License - https://github.com/rafinskipg/Backbone.Validater */
(function(e,i){if(typeof define==="function"&&define.amd){define(["jQuery","_","Backbone"],i)}else{e.amdWeb=i(e.jQuery,e._,e.Backbone)}})(this,function(e,i,t){var r=t.View.extend({validations:{},hasContent:function(e){if(i.isBoolean(e)){return true}if(i.isArray(e)&&e.length>0){return true}if(!i.isArray(e)&&i.keys(e).length>0){var t=i.keys(e);for(var r=0;r<t.length;r++){if(this.hasContent(e[t[r]])){return true}}return false}if(i.isFinite(e)||!i.isEmpty(e)){return true}return false},checkRequiredFields:function(){var e=this.model.toJSON();var i=[];for(var t in this.model.requiredFields){var r=this.model.requiredFields[t];if(!this.hasContent(e[r])){i.push({field:r,validation:"required"})}}return i.length>0?i:null},customValidations:function(){var e=this.getConditionsFulfilled();var i=[];if(e.length>0){var t=this;e.forEach(function(e){var r=e.fields.map(function(e){if(!e.filters){return t.model.get(e.name)}else{return t.getFilteredValuesFromField(e)}});if(!t[e.validation].apply(t,r)){e.fields.forEach(function(t){i.push({field:t.name,validation:e.alias||e.validation})})}})}return i},getConditionsFulfilled:function(){var e=this.extractConditionsFromBindings();var t=this;e=i.compact(e.map(function(e){var i=true;e.fields.forEach(function(e){if(!t.fieldFulfillsCondition(e)){i=false}});if(i){return e}}));return e},fieldFulfillsCondition:function(e){var i=true;if(e.exists){if(!this.model.get(e.name)||!this.hasContent(this.model.get(e.name))){i=false}else if(e.filters&&e.filters.length>0){var t=this.getFilteredValuesFromField(e);if(!this.hasContent(t)){i=false}}}else{if(this.model.get(e.name)&&this.hasContent(this.model.get(e.name))){i=false}}return i},getFilteredValuesFromField:function(e){if(i.isArray(this.model.get(e.name))){return this.filterArrayValues(e)}else{return this.filterObjectValues(e)}},filterArrayValues:function(e){var t=this;return i.filter(this.model.get(e.name),function(i){var r=true;e.filters.forEach(function(e){var n=i[e.field];if(!n||e.value&&n!=e.value||!e.value&&!t.hasContent(n)){r=false}});return r})},filterObjectValues:function(e){var i=this.model.get(e.name);var t=true;var r=this;e.filters.forEach(function(e){var n=i[e.field];if(!n||e.value&&n!=e.value||!e.value&&!r.hasContent(n)){t=false}});return t?i:null},extractConditionsFromBindings:function(){var e=[];var t=this;for(var r in this.validations){var n={};var a=r;var l=this.getAliasFromConditionString(r);if(l.length>0){a=r.replace(l+":","");n.alias=l}var s=this.getFieldsFromFieldsString(a);n.fields=s;n.fields=n.fields.map(function(e){var i=t.getFiltersFromField(e.name);if(i){e.filters=i;e.name=t.removeFiltersStringFromField(e.name)}return e});var o=this.validations[r];if(typeof o=="string"){n.validation=o;e.push(n)}else{o.forEach(function(t){var r=i.clone(n);r.validation=t;e.push(r)})}}return e},getAliasFromConditionString:function(e){var i=e.indexOf(":");if(i!=-1){return e.substr(0,i)}return""},getFieldsFromFieldsString:function(e){return e.match(/[^&]+(?=\{)\{\S+\}|[^&]+/g).map(function(e){var i=e.indexOf("!")==-1;e=e.replace("!","");return{name:e,exists:i}})},removeFiltersStringFromField:function(e){var i=/{([^}]*)}/;var t=i.exec(e)[0];return e.replace(t,"")},getFiltersFromField:function(e){var i=/{([^}]*)}/;if(i.test(e)){var t=i.exec(e)[1];var r=this.getFieldsFromFieldsString(t);r=r.map(function(e){var i={field:e.name};var t=e.name.indexOf("=");if(t!=-1){i.field=e.name.substr(0,t);i.value=e.name.substr(t+1,e.name.length).replace(/\"/g,"")}return i});return r}else{return null}},validate:function(){var e=i.compact(Array.prototype.concat(this.checkRequiredFields(),this.customValidations()));return e.length>0?e:null}});r.VERSION="<% VERSION %>";t.validator=r;return r});